{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Monocopter.svelte",
    "Plotly.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import { state, storeCopterInit, storeCopterUpdate } from './stores.js';\n  import { storeControlUpdate, storeControlStateUpdate } from './stores.js';\n\n  import Plot from \"./svelte-plotly/src/Plotly.svelte\";\n\n  import MonocopterComponent from './components/Monocopter.svelte'\n  import ControlboxComponent from './components/Controlbox.svelte'\n  import Monocopter from \"./physics/PidMonocopter\";\n  import Controller from \"./physics/PidController\";\n\n  const MS_DELAY = 10;\n  const MILLI_DT = 0.01;\n\n  let monocopter;\n  let controller;\n\n  onMount(() => {\n    // console.log('the component has mounted');\n    initialize();\n    let interval = setInterval(update, MS_DELAY);\n    return () => clearInterval(interval);\n  });\n\n  let initialize = () => {\n    monocopter = new Monocopter($state.copter);\n    controller = new Controller(monocopter, $state);\n  }\n\n  let copterStateInit = () => {\n    storeCopterInit();\n    // console.log(\"init\", $state.controlBox);\n    monocopter = new Monocopter($state.copter);\n    controller = new Controller(monocopter, $state);\n    stopFunction();\n  };\n\n  let controlBoxChanged = (key, value) => {\n    storeControlUpdate(key, value)\n    copterStateInit()\n  }\n\n  let controlStateChanged = (key, value) => {\n    storeControlStateUpdate(key, value)\n\t}\n\n  let stopFunction = () => {\n    $state.controlBox.state.ready = false;\n  };\n\n  let update = () => {\n    if ($state.controlBox.state.ready) {\n      // console.log('update', $state.controlBox.k_p, $state.controlBox.k_d)\n      controller.runBy(MILLI_DT, stopFunction);\n      storeCopterUpdate(monocopter.z, monocopter.thrust);\n    }\n  };\n\n</script>\n\n<main>\n  <div class=\"App\">\n    <MonocopterComponent\n        copter={$state.copter} />\n    <ControlboxComponent\n        control={$state.controlBox}\n        {controlBoxChanged}\n        {controlStateChanged}\n        {copterStateInit} />\n\n    <Plot\n      options={{\n        displayModeBar: false\n      }}\n      data={[\n        {\n          type: \"scatter\",\n          showlegend: false,\n          y: $state.copter.z_list,\n          mode: \"lines+points\",\n          marker: { color: \"white\" }\n        },\n        {\n          type: \"scatter\",\n          showlegend: false,\n          y: $state.copter.target_z_list,\n          mode: \"lines+points\",\n          marker: { color: \"red\" }\n        }\n      ]}\n      layout={{\n        title: \"Monocopter PID Controller\",\n        width: 650,\n        height: 400,\n        margin: {l: 35, r:30, t:35, b:32},\n        paper_bgcolor: \"#000000\",\n        plot_bgcolor: \"#000000\",\n        font: { color: \"#ffffff\" }\n      }}\n    />\n\n\n  </div>\n</main>\n\n<style>\n  .App {\n    text-align: center;\n    position: relative;\n    width: 780px;\n    height: 600px;\n    background: #000000;\n    border-radius: 10px;\n  }\n</style>\n",
    "<script>\n  const x_pos = 20;\n  const y_pos = 20;\n\n  const tube_x = x_pos;\n  const tube_y = y_pos;\n  const tube_h = 550;\n\n  const drone_x = x_pos + 57;\n  const drone_y = y_pos + tube_h - 20;\n\n  export let copter;\n\n  let monocopterImage = '/monocopter_svelte/assets/monocopter.png'\n\n</script>\n\n<div>\n  <div class=\"drone\"\n       style=\"left: {drone_x}px;\n              top: {drone_y + copter.z * 240}px;\n              background-image: url({monocopterImage});\n              background-size: 100% 100%;\n              \"></div>\n  <div class=\"cylinder\">\n    <div class=\"ellipse\" style=\"background-color: deepskyblue\"></div>\n    <div class=\"rectangle\" style=\"background-color: lightgray\"></div>\n  </div>\n</div>\n\n<style>\n  .drone {\n    position: absolute;\n    width: 100px;\n    height: 50px;\n    margin: -50px 0 0 -50px;\n    background: #000000;\n    /* border-radius: 50%; */\n    backface-visibility: hidden;\n  }\n  .cylinder {\n    position: absolute;\n    transform: rotateX(70deg);\n\n    left: 20px;\n    top: 20px;\n  }\n  .ellipse {\n    position: absolute;\n    width: 110px;\n    height: 100px;\n    opacity: 0.1;\n    border-radius: 50px;\n  }\n  .rectangle {\n    position: absolute;\n    width: 110px;\n    height: 1600px;\n    opacity: 0.2;\n    border-radius: 50px;\n  }\n\n</style>\n",
    "<script>\n  import Plotly from 'plotly.js/dist/plotly';\n  import { onMount } from 'svelte';\n\n  export let data;\n  export let layout;\n  export let options;\n\n  let plotDiv = undefined\n  let Plot = undefined\n\n  onMount(() => {\n    plotDiv = document.getElementById('plotDiv');\n    Plot = new Plotly.newPlot(plotDiv, data, layout, options);\n  });\n\n  $: if (Plot) Plotly.react(plotDiv, data, layout, options);\n\n</script>\n\n<div\n  class=\"Plot\"\n  id=\"plotDiv\"\n/>\n\n<style>\n  .Plot {\n    left: 130px;\n    top: 190px;\n    position: absolute;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AA2GE,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,IAAI,AACrB,CAAC;ACnFD,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CACvB,UAAU,CAAE,OAAO,CAEnB,mBAAmB,CAAE,MAAM,AAC7B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,QAAQ,KAAK,CAAC,CAEzB,IAAI,CAAE,IAAI,CACV,GAAG,CAAE,IAAI,AACX,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,UAAU,eAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,IAAI,AACrB,CAAC;AClCD,KAAK,cAAC,CAAC,AACL,IAAI,CAAE,KAAK,CACX,GAAG,CAAE,KAAK,CACV,QAAQ,CAAE,QAAQ,AACpB,CAAC"
}